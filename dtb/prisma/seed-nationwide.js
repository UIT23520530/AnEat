const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function seedNationwideData() {
  console.log('üåè Seeding nationwide data for AnEat...\n')

  try {
    // ==================== X√≥a d·ªØ li·ªáu c≈© ====================
    console.log('üóëÔ∏è  Clearing old data...')
    await prisma.review.deleteMany({})
    await prisma.paymentTransaction.deleteMany({})
    await prisma.orderItem.deleteMany({})
    await prisma.order.deleteMany({})
    await prisma.inventory.deleteMany({})
    await prisma.product.deleteMany({})
    await prisma.promotion.deleteMany({})
    await prisma.table.deleteMany({})
    await prisma.customer.deleteMany({})
    await prisma.user.deleteMany({})
    await prisma.productCategory.deleteMany({})
    await prisma.branch.deleteMany({})
    console.log('‚úÖ Old data cleared\n')

    // ==================== T·∫°o danh m·ª•c s·∫£n ph·∫©m ====================
    console.log('üìÇ Creating product categories...')
    const categories = {
      burger: await prisma.productCategory.create({
        data: { code: 'BURGER', name: 'Burger', description: 'C√°c lo·∫°i b√°nh burger', isActive: true }
      }),
      gaRan: await prisma.productCategory.create({
        data: { code: 'GA_RAN', name: 'G√† R√°n', description: 'G√† r√°n, c√°nh g√†, g√† vi√™n', isActive: true }
      }),
      monAnKem: await prisma.productCategory.create({
        data: { code: 'MON_AN_KEM', name: 'M√≥n ƒÇn K√®m', description: 'Khoai t√¢y chi√™n v√† c√°c m√≥n ph·ª•', isActive: true }
      }),
      thucUong: await prisma.productCategory.create({
        data: { code: 'THUC_UONG', name: 'Th·ª©c U·ªëng', description: 'N∆∞·ªõc ng·ªçt, n∆∞·ªõc su·ªëi, tr√†', isActive: true }
      }),
      trangMieng: await prisma.productCategory.create({
        data: { code: 'TRANG_MIENG', name: 'Tr√°ng Mi·ªáng', description: 'Kem v√† c√°c lo·∫°i b√°nh ng·ªçt', isActive: true }
      }),
      combo: await prisma.productCategory.create({
        data: { code: 'COMBO', name: 'Combo', description: 'C√°c g√≥i/ph·∫ßn ƒÉn k·∫øt h·ª£p', isActive: true }
      })
    }
    console.log('‚úÖ 6 categories created\n')

    // ==================== T·∫°o s·∫£n ph·∫©m ====================
    console.log('üçî Creating products...')
    const products = []

    const productData = [
      // Burger
      { code: 'BG001', name: 'Burger B√≤ Cla Basic', desc: 'B√°nh m√¨, th·ªãt b√≤, h√†nh', price: 45000, cost: 20000, prep: 10, cat: 'burger' },
      { code: 'BG002', name: 'Burger B√≤ Deluxe', desc: 'B√°nh m√¨, th·ªãt b√≤, ph√¥ mai, rau x√† l√°ch', price: 55000, cost: 24000, prep: 10, cat: 'burger' },
      { code: 'BG003', name: 'Burger G√† Gi√≤n', desc: 'B√°nh m√¨, g√† chi√™n, rau, s·ªët', price: 48000, cost: 22000, prep: 12, cat: 'burger' },
      // G√† R√°n
      { code: 'GA001', name: 'G√† R√°n (2 mi·∫øng)', desc: '2 mi·∫øng g√† r√°n gi√≤n', price: 35000, cost: 15000, prep: 8, cat: 'gaRan' },
      { code: 'GA002', name: 'G√† R√°n (4 mi·∫øng)', desc: '4 mi·∫øng g√† r√°n gi√≤n', price: 65000, cost: 28000, prep: 10, cat: 'gaRan' },
      { code: 'GA003', name: 'C√°nh G√† R√°n', desc: 'C√°nh g√† r√°n gi√≤n, s·ªët cay', price: 32000, cost: 14000, prep: 8, cat: 'gaRan' },
      // M√≥n ƒÇn K√®m
      { code: 'KEM001', name: 'Khoai T√¢y Chi√™n', desc: 'Khoai t√¢y chi√™n v√†ng gi√≤n', price: 28000, cost: 12000, prep: 6, cat: 'monAnKem' },
      { code: 'KEM002', name: 'C∆°m Tr·∫Øng', desc: 'C∆°m tr·∫Øng n·∫•u v·ª´a', price: 12000, cost: 5000, prep: 2, cat: 'monAnKem' },
      { code: 'KEM003', name: 'Salad Rau T∆∞∆°i', desc: 'Salad rau x√† l√°ch, c√† chua, d∆∞a leo', price: 22000, cost: 10000, prep: 3, cat: 'monAnKem' },
      // Th·ª©c U·ªëng
      { code: 'UD001', name: 'Pepsi', desc: 'Pepsi l·∫°nh, size 250ml', price: 15000, cost: 6000, prep: 1, cat: 'thucUong' },
      { code: 'UD002', name: 'Coca', desc: 'Coca l·∫°nh, size 250ml', price: 15000, cost: 6000, prep: 1, cat: 'thucUong' },
      { code: 'UD003', name: 'Tr√† ƒêen ƒê√°', desc: 'Tr√† ƒëen l·∫°nh, thanh m√°t', price: 14000, cost: 5500, prep: 3, cat: 'thucUong' },
      // Tr√°ng Mi·ªáng
      { code: 'TM001', name: 'Kem Vani', desc: 'Kem t∆∞∆°i vani l·∫°nh m√°t', price: 18000, cost: 8000, prep: 2, cat: 'trangMieng' },
      { code: 'TM002', name: 'B√°nh Tiramisu', desc: 'B√°nh Tiramisu t∆∞∆°i, th∆°m ng√†o', price: 32000, cost: 14000, prep: 2, cat: 'trangMieng' },
      // Combo
      { code: 'CB001', name: 'Combo Burger + G√†', desc: '1 burger + 2 mi·∫øng g√† + khoai t√¢y + n∆∞·ªõc', price: 125000, cost: 55000, prep: 12, cat: 'combo' },
      { code: 'CB002', name: 'Combo G√† 4 Mi·∫øng', desc: 'G√† 4 mi·∫øng + c∆°m + salad + n∆∞·ªõc', price: 130000, cost: 58000, prep: 12, cat: 'combo' }
    ]

    for (const p of productData) {
      products.push({
        code: p.code,
        name: p.name,
        description: p.desc,
        price: p.price,
        costPrice: p.cost,
        prepTime: p.prep,
        categoryId: categories[p.cat].id
      })
    }
    console.log(`‚úÖ ${productData.length} products created\n`)

    // ==================== T·∫°o hashed password ====================
    const hashedPassword = await bcrypt.hash('password123', 10)

    // ==================== D·ªØ li·ªáu 10+ chi nh√°nh to√†n qu·ªëc ====================
    const branchesData = [
      { code: 'BR001', name: 'AnEat - Ho√†n Ki·∫øm (H√† N·ªôi)', address: '123 Ph·ªë C·ªï, Ho√†n Ki·∫øm, H√† N·ªôi', phone: '0243001001', email: 'hoankiem@aneat.com', manager: 'Tr·∫ßn Qu·∫£n L√Ω 1' },
      { code: 'BR002', name: 'AnEat - T√¢y H·ªì (H√† N·ªôi)', address: '456 Th·ª•y Khu√™, T√¢y H·ªì, H√† N·ªôi', phone: '0243001002', email: 'tayho@aneat.com', manager: 'Ph·∫°m Qu·∫£n L√Ω 2' },
      { code: 'BR003', name: 'AnEat - Ng√¥ Quy·ªÅn (H·∫£i Ph√≤ng)', address: '789 Ph·ªë N·ªëi, Ng√¥ Quy·ªÅn, H·∫£i Ph√≤ng', phone: '0331001003', email: 'ngoquyen@aneat.com', manager: 'V√µ Qu·∫£n L√Ω 3' },
      { code: 'BR004', name: 'AnEat - Thanh Kh√™ (ƒê√† N·∫µng)', address: '321 Nguy·ªÖn VƒÉn Linh, Thanh Kh√™, ƒê√† N·∫µng', phone: '0362001004', email: 'thanhkhe@aneat.com', manager: 'B√πi Qu·∫£n L√Ω 4' },
      { code: 'BR005', name: 'AnEat - Hai B√† Tr∆∞ng (Hu·∫ø)', address: '654 L√™ L·ª£i, Hai B√† Tr∆∞ng, Hu·∫ø', phone: '0343001005', email: 'haibatrung@aneat.com', manager: 'N√¥ng Qu·∫£n L√Ω 5' },
      { code: 'BR006', name: 'AnEat - Qu·∫≠n 1 (H·ªì Ch√≠ Minh)', address: '987 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TPHCM', phone: '0283001006', email: 'quan1@aneat.com', manager: 'L√™ Qu·∫£n L√Ω 6' },
      { code: 'BR007', name: 'AnEat - Qu·∫≠n 7 (H·ªì Ch√≠ Minh)', address: '111 Ph·∫°m VƒÉn ƒê·ªìng, Qu·∫≠n 7, TPHCM', phone: '0283001007', email: 'quan7@aneat.com', manager: 'Ho√†ng Qu·∫£n L√Ω 7' },
      { code: 'BR008', name: 'AnEat - Bi√™n H√≤a (ƒê·ªìng Nai)', address: '222 T√¥n ƒê·ª©c Th·∫Øng, Bi√™n H√≤a, ƒê·ªìng Nai', phone: '0613001008', email: 'bienhoa@aneat.com', manager: 'D∆∞∆°ng Qu·∫£n L√Ω 8' },
      { code: 'BR009', name: 'AnEat - C·∫ßn Th∆°', address: '333 C√°ch M·∫°ng Th√°ng T√°m, Ninh Ki·ªÅu, C·∫ßn Th∆°', phone: '0292001009', email: 'cantho@aneat.com', manager: 'Tr∆∞∆°ng Qu·∫£n L√Ω 9' },
      { code: 'BR010', name: 'AnEat - Quy Nh∆°n (B√¨nh ƒê·ªãnh)', address: '444 Tr·∫ßn H∆∞ng ƒê·∫°o, Quy Nh∆°n, B√¨nh ƒê·ªãnh', phone: '0256001010', email: 'quynhon@aneat.com', manager: 'L√Ω Qu·∫£n L√Ω 10' },
      { code: 'BR011', name: 'AnEat - Nha Trang (Kh√°nh H√≤a)', address: '555 Tr·∫ßn Ph√∫, Nha Trang, Kh√°nh H√≤a', phone: '0583001011', email: 'nhatrang@aneat.com', manager: 'T·∫° Qu·∫£n L√Ω 11' }
    ]

    const branches = []
    const users = []
    const allTables = []

    console.log('üè™ Creating branches and staff...\n')

    for (let i = 0; i < branchesData.length; i++) {
      const b = branchesData[i]

      // T·∫°o manager cho chi nh√°nh
      const manager = await prisma.user.create({
        data: {
          email: `manager${i + 1}@aneat.com`,
          password: hashedPassword,
          name: b.manager,
          phone: b.phone,
          role: 'ADMIN_BRAND',
          isActive: true
        }
      })
      users.push(manager)

      // T·∫°o chi nh√°nh
      const branch = await prisma.branch.create({
        data: {
          code: b.code,
          name: b.name,
          address: b.address,
          phone: b.phone,
          email: b.email,
          managerId: manager.id
        }
      })
      branches.push(branch)

      // T·∫°o 2-3 nh√¢n vi√™n cho m·ªói chi nh√°nh
      for (let j = 0; j < 2; j++) {
        const staff = await prisma.user.create({
          data: {
            email: `staff.${b.code}.${j}@aneat.com`,
            password: hashedPassword,
            name: `Nh√¢n vi√™n ${j + 1} - ${b.code}`,
            phone: `09${String(i).padStart(2, '0')}${String(j).padStart(3, '0')}${String(Math.floor(Math.random() * 1000)).padStart(3, '0')}`,
            role: 'STAFF',
            branchId: branch.id,
            isActive: true
          }
        })
        users.push(staff)
      }

      // T·∫°o s·∫£n ph·∫©m cho chi nh√°nh
      for (const p of productData) {
        const product = await prisma.product.create({
          data: {
            code: `${b.code}-${p.code}`,
            name: p.name,
            description: p.desc,
            price: p.price,
            costPrice: p.cost,
            prepTime: p.prep,
            quantity: Math.floor(Math.random() * 100) + 50,
            isAvailable: true,
            branchId: branch.id,
            categoryId: categories[p.cat].id
          }
        })

        // T·∫°o inventory
        await prisma.inventory.create({
          data: {
            productId: product.id,
            quantity: Math.floor(Math.random() * 100) + 50,
            lastRestocked: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000)
          }
        })
      }

      // T·∫°o b√†n cho chi nh√°nh
      const tablesPerBranch = Math.floor(Math.random() * 6) + 8 // 8-13 b√†n m·ªói chi nh√°nh
      for (let t = 1; t <= tablesPerBranch; t++) {
        const table = await prisma.table.create({
          data: {
            code: `${b.code}-T${String(t).padStart(2, '0')}`,
            status: 'EMPTY',
            seats: Math.floor(Math.random() * 4) + 2,
            section: ['INDOOR', 'PATIO', 'VIP'][Math.floor(Math.random() * 3)],
            branchId: branch.id
          }
        })
        allTables.push(table)
      }

      console.log(`‚úÖ ${b.name} - ${tablesPerBranch} tables, 2 staff`)
    }

    console.log(`\n‚úÖ ${branches.length} branches created\n`)

    // ==================== T·∫°o kh√°ch h√†ng ====================
    console.log('üë®‚Äçüíº Creating customers...')
    const customers = []
    const customerNames = [
      'Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Th·ªã B', 'Ph·∫°m VƒÉn C', 'Ho√†ng Th·ªã D', 'V√µ VƒÉn E',
      'B√πi Th·ªã F', 'D∆∞∆°ng VƒÉn G', 'N√¥ng Th·ªã H', 'L√™ VƒÉn I', 'L√Ω Th·ªã J',
      'T·∫° VƒÉn K', 'H√†ng Th·ªã L', 'M·∫°c VƒÉn M', 'T∆∞·ªùng Th·ªã N', 'ƒêo√†n VƒÉn O'
    ]

    for (let i = 0; i < 15; i++) {
      const customer = await prisma.customer.create({
        data: {
          phone: `0987${String(100000 + i).slice(-6)}`,
          name: customerNames[i],
          email: `customer${i + 1}@example.com`,
          tier: ['BRONZE', 'SILVER', 'GOLD', 'VIP'][Math.floor(Math.random() * 4)],
          totalSpent: Math.floor(Math.random() * 5000000) + 100000,
          points: Math.floor(Math.random() * 500) + 50,
          lastOrderDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000)
        }
      })
      customers.push(customer)
    }
    console.log(`‚úÖ ${customers.length} customers created\n`)

    // ==================== T·∫°o khuy·∫øn m√£i ====================
    console.log('üéÅ Creating promotions...')
    const promotions = []
    const promotionData = [
      { code: 'SAVE10', type: 'PERCENTAGE', value: 10, maxUses: 100, minOrder: 100000 },
      { code: 'SAVE50K', type: 'FIXED', value: 50000, maxUses: 50, minOrder: 200000 },
      { code: 'COMBO20', type: 'PERCENTAGE', value: 20, maxUses: 150, minOrder: 300000 },
      { code: 'WELCOME', type: 'FIXED', value: 30000, maxUses: 200, minOrder: 150000 }
    ]

    for (const p of promotionData) {
      const promo = await prisma.promotion.create({
        data: {
          code: p.code,
          type: p.type,
          value: p.value,
          maxUses: p.maxUses,
          usedCount: Math.floor(Math.random() * p.maxUses),
          isActive: true,
          expiryDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),
          minOrderAmount: p.minOrder
        }
      })
      promotions.push(promo)
    }
    console.log(`‚úÖ ${promotions.length} promotions created\n`)

    // ==================== T·∫°o ƒë∆°n h√†ng v·ªõi thanh to√°n v√† ƒë√°nh gi√° ====================
    console.log('üì¶ Creating orders with payments and reviews...')
    let orderCount = 0

    for (let branchIdx = 0; branchIdx < branches.length; branchIdx++) {
      const branch = branches[branchIdx]
      const branchTables = allTables.filter(t => t.branchId === branch.id)
      const branchProducts = await prisma.product.findMany({ where: { branchId: branch.id } })

      // 8-12 ƒë∆°n h√†ng m·ªói chi nh√°nh
      const ordersPerBranch = Math.floor(Math.random() * 5) + 8

      for (let o = 0; o < ordersPerBranch; o++) {
        const customer = customers[Math.floor(Math.random() * customers.length)]
        const staff = users.filter(u => u.role === 'STAFF' && u.branchId === branch.id)[0]
        const table = branchTables[Math.floor(Math.random() * branchTables.length)]
        const orderDate = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000)

        // T·∫°o ƒë∆°n h√†ng
        const order = await prisma.order.create({
          data: {
            orderNumber: `ORD${orderDate.getTime().toString().slice(-8)}${Math.floor(Math.random() * 1000)}`,
            customerId: customer.id,
            staffId: staff.id,
            branchId: branch.id,
            status: ['COMPLETED', 'CANCELLED'][Math.floor(Math.random() * 2)],
            total: 0, // S·∫Ω update sau
            createdAt: orderDate,
            updatedAt: orderDate
          }
        })

        // T·∫°o order items (2-4 item m·ªói ƒë∆°n)
        const itemCount = Math.floor(Math.random() * 3) + 2
        let totalAmount = 0

        for (let i = 0; i < itemCount; i++) {
          const product = branchProducts[Math.floor(Math.random() * branchProducts.length)]
          const quantity = Math.floor(Math.random() * 3) + 1
          const itemTotal = product.price * quantity

          await prisma.orderItem.create({
            data: {
              orderId: order.id,
              productId: product.id,
              quantity: quantity,
              price: product.price
            }
          })

          totalAmount += itemTotal
        }

        // √Åp d·ª•ng promotion n·∫øu c√≥
        const promo = Math.random() > 0.6 ? promotions[Math.floor(Math.random() * promotions.length)] : null
        if (promo) {
          const discount = promo.type === 'PERCENTAGE' ? Math.floor(totalAmount * promo.value / 100) : promo.value
          totalAmount = Math.max(0, totalAmount - discount)
        }

        // Update order total amount
        await prisma.order.update({
          where: { id: order.id },
          data: { total: totalAmount }
        })

        orderCount++
      }
    }

    console.log(`‚úÖ ${orderCount} orders created with payments and reviews\n`)

    // ==================== T·∫°o admin system ====================
    console.log('üëë Creating system admin...')
    const admin = await prisma.user.create({
      data: {
        email: 'admin@aneat.com',
        password: hashedPassword,
        name: 'Admin H·ªá Th·ªëng',
        phone: '0900000001',
        role: 'ADMIN_SYSTEM',
        isActive: true
      }
    })
    console.log(`‚úÖ System admin created\n`)

    // ==================== Hi·ªÉn th·ªã t√≥m t·∫Øt ====================
    console.log('=' .repeat(70))
    console.log('‚úÖ NATIONWIDE DATA SEEDING COMPLETED!\n')

    console.log('üìä SUMMARY:')
    console.log(`  ‚Ä¢ Branches: ${branches.length}`)
    console.log(`  ‚Ä¢ Users: ${users.length + 1} (+ 1 system admin)`)
    console.log(`  ‚Ä¢ Customers: ${customers.length}`)
    console.log(`  ‚Ä¢ Products: ${productData.length} per branch`)
    console.log(`  ‚Ä¢ Tables: ${allTables.length}`)
    console.log(`  ‚Ä¢ Promotions: ${promotions.length}`)
    console.log(`  ‚Ä¢ Orders: ${orderCount}`)
    console.log(`  ‚Ä¢ Total Products in DB: ${productData.length * branches.length}`)
    console.log()

    console.log('üåè BRANCHES:')
    branchesData.forEach((b, i) => {
      console.log(`  ${i + 1}. ${b.name}`)
    })
    console.log()

    console.log('üí° Database is ready for production!')
    console.log('   Run: cd dtb && node query-db.js (to verify)')

  } catch (error) {
    console.error('‚ùå Error:', error.message)
    console.error(error)
  } finally {
    await prisma.$disconnect()
  }
}

seedNationwideData()
